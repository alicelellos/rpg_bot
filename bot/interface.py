from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, CallbackContext
import logging
import os
from pathlib import Path
import random

from rpg_bot.config import config
from game.engine import GameEngine
from game.entities.character import Character
from game.utils.enums import Gender

logger = logging.getLogger(__name__)

class TelegramGameInterface:
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∏–≥—Ä–æ–π —á–µ—Ä–µ–∑ Telegram"""
    def __init__(self, engine: GameEngine):
        self.engine = engine
        self.player_characters: Dict[int, str] = {}
        self.user_states: Dict[int, str] = {}
        self.message_callbacks: Dict[int, callable] = {}
    
    async def handle_start(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        if user_id in self.player_characters:
            char = self.engine.world.find_character(self.player_characters[user_id])
            if char:
                await update.message.reply_text(
                    f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {char.name}!",
                    reply_markup=self._get_main_menu(char)
                )
        else:
            await update.message.reply_text(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –¢–µ–Ω–µ–π!\n"
                "–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å, —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", callback_data="create_character")]
                ])
            )
    async def handle_create_character(self, update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    query = update.callback_query
    await query.answer()
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫
        try:
            char = self.engine.generate_character()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {str(e)}")
            # –ü—Ä–æ–±—É–µ–º —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            char = self.engine.create_character("–°—Ç—Ä–∞–Ω–Ω–∏–∫", Gender.MALE, "slavic")
        
        user_id = query.from_user.id
        self.player_characters[user_id] = char.id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        char.save()
        
        # –ü–æ–º–µ—â–∞–µ–º –≤ —Å—Ç–∞—Ä—Ç–æ–≤—É—é –ª–æ–∫–∞—Ü–∏—é
        start_loc = random.choice(["black_bastion", "silver_harbor"])
        success = self.engine.move_character(char, start_loc)
        if not success:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –ª–æ–∫–∞—Ü–∏–∏ {start_loc}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        await query.edit_message_text(
            f"üé≠ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂:\n"
            f"–ò–º—è: {char.name}\n"
            f"–ü–æ–ª: {char.gender.value}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {char.age}\n"
            f"–°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {char.social_class.value}\n"
            f"–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {char.profession}\n\n"
            f"–í–Ω–µ—à–Ω–æ—Å—Ç—å: {char.appearance.describe()}\n\n"
            f"–í—ã –æ—á–Ω—É–ª–∏—Å—å –≤ –ª–æ–∫–∞—Ü–∏–∏: {char.location.name if char.location else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}",
            reply_markup=self._get_main_menu(char)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_create_character: {str(e)}")
        await query.edit_message_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", callback_data="create_character")]
            ])
        )
        
    async def handle_explore(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        char = self.engine.world.find_character(self.player_characters.get(user_id))
        if not char or not char.location:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
          
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ —Å –∫–∞—Ä—Ç–æ–π
        description = char.location.describe(char, detailed=True)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
        map_img = char.location.render_map(char)
        map_path = os.path.join(MAPS_DIR, f"{char.id}_map.png")
        map_img.save(map_path)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∫–∞—Ä—Ç—É
        with open(map_path, "rb") as photo:
            await context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=photo,
                caption=description,
                reply_markup=self._get_explore_menu(char)
            )
        
        await query.delete_message()